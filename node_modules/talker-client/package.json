{
  "name": "talker-client",
  "version": "1.4.1",
  "description": "A client for the Talker chat service",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git@github.com:8bitDesigner/talker-client.git"
  },
  "author": {
    "name": "Paul Sweeney",
    "email": "paul@8-bitdesign.com"
  },
  "license": "BSD",
  "dependencies": {
    "deep-extend": "~0.2.5",
    "coffee-script": "~1.6.2",
    "async": "~0.2.8",
    "request": "~2.21.0"
  },
  "readme": "# What is this?\nA high-ish level interface for [Talker](http://talkerapp.com/)\n\n## How do I use it?\n\n``` javascript\nvar Talker = require('talker-client')\n  , client = new Talker({ account: 'test', token: 'your token here' })\n\nclient.getRooms(function(err, rooms) {\n  var firstRoom = rooms.pop()\n    , room = client.join(firstRoom.id)\n\n  room.on('users', function(message) {\n    console.log('users currently connected', message.users)\n    message.users.forEach(function(user) {\n      if (user.name  === 'paul.sweeney') { room.message('oh hai, Paul!') }\n    })\n  })\n})\n```\n\n# API Docs\n\n## Class: `Talker`\nUsage:\n``` javascript\nvar client = new Talker({ account: 'your account', token: 'your token' })\n```\n\n`account` is your Talker subdomain (eg: `[youraccount].talker.com` )  \n`token` is account token, you can find this by going to [http://talkerapp.com/settings](http://talkerapp.com/settings)\n\n### Methods\n#### `getRooms(callback)`\nReturns a list of rooms, and the list of users for each room:\n\n``` json\n[\n  {\n    \"name\": \"Main\",\n    \"id\": 38287,\n    \"account\": { \"id\": 36142 },\n    \"users\": [\n      { \"name\": \"User\", \"id\": 69351 }\n    ]\n  }\n]\n```\n\n#### `join(roomId)`\nReturn an instance of the `Room` class.\n\n### Properties\n#### `rooms`\n`rooms` is a key/value hash of room IDs to their connected room instaces. eg:\n\n``` javascript\nvar client = new Talker({ ... })\nclient.join(1234)\nclient.room[1234].send('Oh hai')\n```\n\n\n### Events\nAll `Room` events are emitted on the client directly, with the first parameter\nbeing the room ID and the second being the event payload:\n\n``` javascript\nvar client = new Talker({ ... })\n  , room = client.join(1234)\n\nclient.on('message', function(1234, message) { ... })\nroom.on('message', function(message) { ... })\n```\n\n## Class: `Room`\nCreated by calling `join` on a Talker client instance\n\n### Methods\n#### `mesasge(content [, to])`\nSends a mesasge to the room. Specifying a user ID as the second parameter will\nsend a private message to that user.\n\n#### `leave()`\nLeaves a room.\n\n### Events\n#### `connect`\nEmitted when you've connected to the Talker Room\n\n#### `error`\nEmitted whenever the client encounters an error from Talker\n\n#### `message`\nEmitted when a user in the talker room sends a message:\n\n``` json\n{\n  \"type\": \"message\",\n  \"content\": \"message to send\",\n  \"user\": { \"id\": \"unique id\", \"name\": \"user name\" },\n  \"time\": 1255447115\n}\n```\n\n#### `join`\nEmitted when a new user joins the room\n\n``` json\n{\n  \"type\": \"join\",\n  \"user\": { \"id\": \"unique id\", \"name\": \"user name\" },\n  \"time\": 1255447115,\n}\n```\n\n#### `users`\nEmitted when you join a room, the payload is a list of all the users currently\nin the room:\n\n``` json\n{\n  \"type\": \"users\",\n  \"users\": [\n    { \"id\": \"unique id\", \"name\": \"user name\" }\n  ]\n}\n```\n\n#### `idle`\nEmitted when a user in the room goes idle\n\n```json\n{\n  \"type\": \"idle\",\n  \"user\": { \"id\": \"unique id\", \"name\": \"user name\" },\n  \"time\": 1255447115,\n}\n```\n\n#### `back`\nEmitted when a user in the room returns from being idle\n\n```json\n{\n  \"type\": \"back\",\n  \"user\": { \"id\": \"unique id\", \"name\": \"user name\" },\n  \"time\": 1255447115,\n}\n```\n\n\n#### `leave`\nEmitted when a user leaves the room\n\n```json\n{\n  \"type\": \"leave\",\n  \"user\": \"user unique id\",\n  \"time\": 1255447115,\n}\n```\n",
  "readmeFilename": "Readme.md",
  "_id": "talker-client@1.4.1",
  "dist": {
    "shasum": "b6907c64627329c1772348e08a429ec4abdaa72f"
  },
  "_from": "talker-client@1.4.1",
  "_resolved": "https://registry.npmjs.org/talker-client/-/talker-client-1.4.1.tgz"
}
